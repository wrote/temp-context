{"version":3,"sources":["../../src/lib/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ;AAC9B,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc;AAC5C,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;AAC3C,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS;AAClC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW;;AAEpC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;;EAE7B,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI;EACxC,EAAE,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpB,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;MAClC,YAAY,CAAC,CAAC,IAAI;IACpB,CAAC;IACD,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC1C,QAAQ,CAAC,IAAI,CAAC,CAAC;IACf,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;IAChB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI;IAChC,EAAE,CAAC,IAAI,CAAC,CAAC;IACT,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC;EACA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EAChC,MAAM,CAAC;AACT","file":"lib/index.js","sourcesContent":["import Pedantry from 'pedantry'\nimport SnapshotStream from './SnapshotStream'\nimport { lstat, createReadStream } from 'fs'\nimport { collect } from 'catchment'\nimport makePromise from 'makepromise'\n\nexport const getSnapshot = async (path, requestedPath) => {\n  const s = new SnapshotStream()\n  /** @type {import('fs').Stats} */\n  const ls = await makePromise(lstat, path)\n  if (ls.isDirectory()) {\n    const pedantry = new Pedantry(path, {\n      addBlankLine: true,\n    })\n    pedantry.on('file', f => s.currentFile = f)\n    pedantry.pipe(s)\n    pedantry.on('error', e => s.emit('error', e))\n  } else if (ls.isFile()) {\n    s.currentFile = requestedPath\n    const rs = createReadStream(path)\n    rs.pipe(s)\n    rs.on('error', e => s.emit('error', e))\n  }\n  const snapshot = await collect(s)\n  return snapshot\n}"]}