{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import ensurePath from '@wrote/ensure-path'\nimport rm from '@wrote/rm'\nimport clone from '@wrote/clone'\nimport read from '@wrote/read'\nimport write from '@wrote/write'\nimport { join } from 'path'\nimport { lstat } from 'fs'\nimport makePromise from 'makepromise'\nimport { tmpdir } from 'os'\nimport { getSnapshot } from './lib'\n\nconst exists = async (path) => {\n  try {\n    await makePromise(lstat, path)\n    return true\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * A test context that creates and destroys a temp directory. By default, the temp directory will be `test/temp` relative to the current working directory, but it can be changed by extending the class and setting its `TEMP` property in the constructor.\n */\nexport default class TempContext {\n  constructor() {\n    this._TEMP = join('test', 'temp')\n  }\n  async _init() {\n    const p = this.resolve('t')\n    await ensurePath(p)\n  }\n  /**\n   * This method should be called in the constructor by classes that extend the `TempContext` to use the temp directory of the os system.\n   * @param {string} name The name of the directory inside of the temp dir.\n   */\n  _useOSTemp(name) {\n    this._TEMP = join(tmpdir(), name)\n  }\n  /**\n   * Read a file from the filesystem.\n   * @param {string} path Path of the file to read.\n   */\n  get readGlobal() {\n    return read\n  }\n  /**\n   * Check if the path exists on the filesystem.\n   * @param {string} path The path to check.\n   */\n  async existsGlobal(path) {\n    const res = await exists(path)\n    return res\n  }\n  /**\n   * Check if the path exists in the temp directory.\n   * @param {string} path The relative path inside of the temp dir to check.\n   */\n  async exists(path) {\n    const p = this.resolve(path)\n    const res = await exists(p)\n    return res\n  }\n  /**\n   * Read a file inside of the temp directory.\n   * @param {string} path Path of the file in the temp directory.\n   */\n  async read(path) {\n    const p = this.resolve(path)\n    const res = await read(p)\n    return res\n  }\n  /**\n   * Write a file in the temp directory.\n   * @param {string|Buffer} path Path to the file within the temp directory.\n   * @param {string} data Data to write.\n   */\n  async write(path, data) {\n    const p = this.resolve(path)\n    await write(p, data)\n    return p\n  }\n  /**\n   * Get a path to a file inside of the temp directory.\n   * @param {string} path The relative path to the file inside of the temp dir.\n   */\n  resolve(path) {\n    return join(this.TEMP, path)\n  }\n  /**\n   * Path to the temp directory.\n   */\n  get TEMP() {\n    return this._TEMP\n  }\n  set TEMP(val) {\n    this._TEMP = val\n  }\n  async _destroy() {\n    await rm(this.TEMP)\n  }\n  /**\n   * Remove a file inside of the temp directory.\n   * @param {string} path The path of the file to remove.\n   */\n  async rm(path) {\n    const p = this.resolve(path)\n    await rm(p)\n  }\n  /**\n   * Clone a file or directory.\n   * @param {string} path Path to the file or directory to clone.\n   * @param {string} to Path to the directory to contain the file or directory being cloned (not the path to the cloned entity).\n   */\n  get clone() {\n    return clone\n  }\n  /**\n   * Capture the contents of the temp directory as a string (or partial contents if the inner path is given).\n   * @param {string} innerPath Path inside of the temp dir to snapshot.\n   * @todo add the ignore option\n   */\n  async snapshot(innerPath = '.') {\n    const p = this.resolve(innerPath)\n    /** @type {string} */\n    const s = await getSnapshot(p, innerPath)\n    return s\n  }\n}"]}