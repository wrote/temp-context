{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { join } from 'path'\nimport rm from '@wrote/rm'\nimport ensurePath from '@wrote/ensure-path'\nimport Pedantry from 'pedantry'\nimport { lstat, createReadStream, createWriteStream } from 'fs'\nimport { collect } from 'catchment'\nimport clone from '@wrote/clone'\nimport makePromise from 'makepromise'\nimport SnapshotStream from './SnapshotStream'\n\nlet TEMP = 'test/temp'\n\nconst getSnapshot = async (path) => {\n  const pedantry = new Pedantry(path, {\n    addBlankLine: true,\n  })\n  const s = new SnapshotStream()\n  pedantry.on('file', f => s.currentFile = f)\n  pedantry.pipe(s)\n  const snapshot = await collect(s)\n  return snapshot\n}\n\n/**\n * A test context that creates and destroys a temp directory. By default, the temp directory will be `test/temp` relative to the current working directory, but it can be changed with `setTemp` method.\n */\nexport default class TempContext {\n  async _init() {\n    const p = join(TEMP, 'temp')\n    await ensurePath(p)\n  }\n  /**\n   * Read a file.\n   * @param {string} path Path of the file to read.\n   */\n  async read(path) {\n    const rs = createReadStream(path)\n    const res = await collect(rs)\n    return res\n  }\n  /**\n   * Read a file relative to the temp directory.\n   * @param {string} path Path of the file in the temp directory.\n   */\n  async readInTemp(path) {\n    const p = join(this.TEMP, path)\n    const rs = createReadStream(p)\n    const res = await collect(rs)\n    return res\n  }\n  /**\n   * Write a file in a temp directory.\n   * @param {string} data Data to write.\n   * @param {string} path Path to the file within the temp directory.\n   */\n  async write(data, path) {\n    const p = join(this.TEMP, path)\n    const ws = createWriteStream(p)\n    await new Promise((r, j) => {\n      ws.on('error', j).on('close', r).end(data)\n    })\n    return p\n  }\n  /**\n   * Path to the temp directory.\n   */\n  get TEMP() {\n    return TEMP\n  }\n  async _destroy() {\n    await rm(TEMP)\n  }\n  /**\n   * Clone a file or directory.\n   * @param {string} path Path to the file or directory to clone.\n   * @param {string} to Path to the directory to contain the file or directory being cloned (not the path to the cloned entity).\n   */\n  get clone() {\n    return clone\n  }\n  /**\n   * Checks if the path exists.\n   */\n  async exists(path) {\n    try {\n      await makePromise(lstat, path)\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n  /**\n   * Capture the contents of the temp directory as a string.\n   */\n  async snapshot() {\n    /** @type {string} */\n    const s = await getSnapshot(this.TEMP)\n    return s\n  }\n  /**\n   * Sets a path for any instances of the `TempContext`.\n   * @param {string} path Path to the new temp directory.\n   */\n  static setTemp(path) {\n    TEMP = path\n  }\n}"]}